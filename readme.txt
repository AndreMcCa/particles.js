1. Получаем ссылку на элемент canvas
2. Определяем context как '2d'
3. Ширина и высота элемента canvas напрямую зависит от размеров окна просмотра, при изменении которого изменяется

4. Создаем массив частичек и объект характеристик

Класс Particles

Метод reDraw: 
    1. Открывем путь.
    2. Создаем окружность (x, y, радиус, угол начала пути (по часовой стрелке), угол завершения пути)
    3. Закрываем путь
    4. Указываем цвет заливки
    5. Заливаем

Метод position:
    1. Если координата частички превишает ширину/высоту окна просмотра текущую скорость * -1,что меняет знак на противоположный, что в следствие изменит направление движения
    2. Текущее положение по x,y += текущей скорости для каждой частички = на каждом кадре (1000 / 60fps = 16.5 ms) рисует частичку со смещеннием 


reDrawBackground() 
    1. Заливает canvas на каждом кадре перерисовки 

reDrawParticles() 
    1. Запускает цикл по масиву частичек, и для каждого эл. массива запускает методы position(), reDraw(), reCalculateLife();

drawLines()

    1. Запускает цикл который на каждой итерации определяет координаты элемента в переменные, и для этого елемента запускает цикл, 
    который определяет координаты частиц в переменные.
    2. Если расстояние между частичками мешьше заданого соеденяим их линией



Алгоритм выполнения скрипта

    1. Вызывается функция init() - которая наполняет массив частичками и вызывает функцию loop()
    2. Функция loop() последовательно вызывает функции reDrawBackground(), reDrawParticles(), drawLines() 
        и вызывает метод requestAnimationFrame указывающий браузеру о выполнении анимации, 
        и запрашивает запланировать перерисовку на следующем кадре анимации. 
        Вызывает рекурсивную функцию loop() перед перерисовкой.
    